{
    "Print": {
        "prefix": "print",
        "body": [
            "print($1)"
        ],
        "description": "Print"
    },
    "If, else example": {
        "prefix": "if_else",
        "body": [
            "if $1:",
            "\t$2",
            "else:",
            "\t$3",
            "$0"
        ],
        "description": "If, else example"
    },
    "If else if else": {
        "prefix": "if_elseif_else",
        "body": [
            "if ${1:condition}:",
            "\t$2",
            "elif ${3:condition}:",
            "\t$4",
            "else:",
            "\t$5"
        ],
        "description": "If else if else"
    },
    "While Loop": {
        "prefix": "while_loop",
        "body": [
            "while ${1:condition}:",
            "\t$2"
        ],
        "description": "While Loop"
    },
    "Element wise for loop": {
        "prefix": "for_loop",
        "body": [
            "for $1 in ${2:iterable}:",
            "\t$3"
        ],
        "description": "Element wise for loop"
    },
    "Break": {
        "prefix": [
            "bre",
            "brea",
            "break"
        ],
        "body": [
            "break"
        ],
        "description": "Break"
    },
    "Return": {
        "prefix": [
            "return",
            "retu",
            "retur"
        ],
        "body": [
            "return"
        ],
        "description": "Return"
    },
    "Program exit": {
        "prefix": "program_exit",
        "body": [
            "import sys",
            "sys.exit(0)"
        ],
        "description": "Program exit"
    },
    "Conditional": {
        "prefix": [
            "conditional",
            "ternary"
        ],
        "body": [
            "${1:true_code} if ${2:condition_check} else ${3:false_code}"
        ],
        "description": "Python conditional"
    },
    "Try catch finally": {
        "prefix": "try_catch_finally",
        "body": [
            "try:",
            "\t$1",
            "catch ${2:BaseException}:",
            "\t$3",
            "finally:",
            "\t$4"
        ],
        "description": "Try catch finally"
    },
    "Lambda": {
        "prefix": "lambda",
        "body": [
            "lambda ${1:parameter_list}: ${2:expression}"
        ],
        "description": "Lambda"
    },
    "User input": {
        "prefix": "user_input",
        "body": [
            "$2 = input('${1:prompt_here}')"
        ],
        "description": "User input"
    },
    "string interpolation": {
        "prefix": "string_interpolation",
        "body": [
            "f'$1 {${2:expression_here}} $3'"
        ],
        "description": "string interpolation"
    },
    "Main entry point": {
        "prefix": "main_entry",
        "body": [
            "if __name__ == '__main__':",
            "\t$1"
        ],
        "description": "Main entry point"
    },
    "Regular expression match": {
        "prefix": "regex_match",
        "body": [
            "import re",
            "match = re.match(r\"${1:regex_here}\", ${2:string_here})"
        ],
        "description": "Regular expression match"
    },
    "Block comment": {
        "prefix": "block_comment",
        "body": [
            "$BLOCK_COMMENT_START$1$BLOCK_COMMENT_END"
        ],
        "description": "Block comment"
    },
    "Reserved words": {
        "prefix": "reserved_words",
        "body": [
            "$BLOCK_COMMENT_START",
            "True - Is the boolean value for true.",
            "False - Is the boolean value for false.",
            "class - Is used to define a new user-defined class",
            "finally - Is used with try…except block to do one final thing regardless of what executed before it those blocks",
            "is - Used in Python for testing object identity. While the == operator is used to test if two variables are equal or not, is is used to test if the two variables refer to the same object",
            "return - Returns a value from a function",
            "None - This is the stand-in for null, says that the object reference doesn't point to anything.",
            "continue - Will stop loop execution and go back and re-evaluate the loop condition/start a new iteration.",
            "for - Is used for looping. Generally we use for when we know the number of times we want to loop.",
            "lambda - Is used to create an anonymous function (function with no name). It is an inline function that does not contain a return statement. It consists of an expression that is evaluated and returned.",
            "try - Create an exception handling block.",
            "def - Defines a function.",
            "from - from…import is used to import specific attributes or functions into the current namespace.",
            "nonlocal - Is used to declare that a variable inside a nested function (function inside a function) is not local to it, meaning it lies in the outer inclosing function.",
            "while - Creates a while loop, this loop runs until the condition at it's beginning is met.",
            "and - Logical and.",
            "del - Is used to delete the reference to an object.",
            "global - Is used to declare that a variable inside the function is global (outside the function).",
            "not - Logical not.",
            "with - Is used to wrap the execution of a block of code within methods defined by the context manager.",
            "as - Is used to create an alias while importing a module.",
            "elif - A branch to check when your \"if\" branch fails.",
            "if - Check a condition, if the condition is true execute the code in it's body.",
            "or - Logical or.",
            "yield - Is used inside a function like a return statement. But yield returns a generator.",
            "assert - A testing debug test condition.",
            "else - A bit of code that is execute if the condition in the \"if\" block fails.",
            "import - Is used to import modules into the current namespace.",
            "pass - Is a null statement in Python. Nothing happens when it is executed. It is used as a placeholder.",
            "break - Will cease the loop execution at this point.",
            "except - Is used to catch a specific exception that occurs when a program in running in a try block.",
            "in - Is used to test if a sequence (list, tuple, string etc.) contains a value.",
            "raise - Is used to trow and exception.",
            "$BLOCK_COMMENT_END"
        ],
        "description": "Reserved words"
    },
    "Array slice": {
        "prefix": "array_slice",
        "body": [
            "${1:array}[${2:start_inclusive} : ${3:stop_exclusive} : ${4| ,1|}]"
        ],
        "description": "Array slice"
    },
    "Large Number": {
        "prefix": "large_number",
        "body": [
            "float(\"inf\")"
        ],
        "description": "Large Number"
    },
    "Small Number": {
        "prefix": "small_number",
        "body": [
            "float(\"-inf\")"
        ],
        "description": "Small Number"
    },
    "Empty snippet for making insertions easier": {
        "prefix": "",
        "body": [
            ""
        ],
        "description": ""
    }
}